### check app's code signature ###
codesign -dvvv <path to .app>

Authority=<certificate type/name>
flags=0x10000(runtime) # hardened runtime

### check if app is notarized ###
spctl -a -vvv <path to .app>

source= <will say Notarized, if notarized>


### check if pkg is notarized ###
spctl -a -vvv -t install <path to .pkg>

### stop gatekeeper from marking the app as corrupted, clear a file's attributes ###
xattr -cr <path to .app or file>

### check exe architecture ###
lipo -info <path to unix exe>

### find file matching multiple patterns ###
find <dir> \( -iname "*.h" -o -iname "*.cpp" \)

### find file containing text ###
find <dir> -iname <filename pattern> | xargs grep "<text pattern>"

### reset access permission for Microphone, Camera, special folders ###
tccutil reset Microphone <bundle ID>
tccutil reset Camera <bundle ID>
tccutil reset SystemPolicyDesktopFolder <bundle ID>
tccutil reset SystemPolicyDownloadsFolder <bundle ID>
tccutil reset SystemPolicyDocumentsFolder <bundle ID>

### show selected xcode Developer folder ###
xcode-select -p

### change to other xcode Developer folder ###
sudo xcode-select -s <path to Xcode.app/Contents/Developer>

### start a local http file server ###
python -m SimpleHTTPServer <port>

### accept xcode license ###
sudo xcrun -license accept

### symbolicate crash report manually ###
put dsym and .app on the directory you're running this
xcrun atos -o <path to exe> -l <first binary image load address of the app on the crash report> <address to symbolicate>
e.g:
xcrun atos -o ./MyApp/Contents/MacOS/MyApp -l 0x10fa6d000 0x000000010fd1de43
